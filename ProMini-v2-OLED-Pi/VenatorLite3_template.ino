#include <OneWire.h>
//начальные установки ****************************************************************************************  
         byte          volt      = 0;     //номер аналогового входа бортового напряжения
         byte          fuel      = 1;     //номер аналогового входа датчика топлива 
         byte          temp      = 2;     //номер аналогового входа датчика температуры
         byte          igni      = 4;     //номер цифрового входа сигнала зажигания
         byte          trnL      = 5;     //номер цифрового входа поворот левый
         byte          trnR      = 6;     //номер цифрового входа поворот правый
         byte          ligh      = 7;     //номер цифрового входа габариты
         byte          loli      = 8;     //номер цифрового входа свет ближний
         byte          hili      = 9;     //номер цифрового входа свет дальний
         byte          fogR      = 10;    //номер цифрового входа ПТФ передние
         byte          fogF      = 11;    //номер цифрового входа ПТФ задние
         byte          revr      = 12;    //номер цифрового входа задний ход
         byte          lm00      = 23;    //номер цифрового входа контрольной лампы  0
         byte          lm01      = 25;    //номер цифрового входа контрольной лампы  1
         byte          lm02      = 27;    //номер цифрового входа контрольной лампы  2
         byte          lm03      = 29;    //номер цифрового входа контрольной лампы  3
         byte          lm04      = 31;    //номер цифрового входа контрольной лампы  4(-)
         byte          lm05      = 33;    //номер цифрового входа контрольной лампы  5(-)
         byte          lm06      = 35;    //номер цифрового входа контрольной лампы  6
         byte          lm07      = 37;    //номер цифрового входа контрольной лампы  7
         byte          lm08      = 39;    //номер цифрового входа контрольной лампы  8
         byte          lm09      = 41;    //номер цифрового входа контрольной лампы  9
         byte          lm10      = 43;    //номер цифрового входа контрольной лампы 10
         byte          lm11      = 45;    //номер цифрового входа контрольной лампы 11
         byte          lm12      = 47;    //номер цифрового входа контрольной лампы 12(-)
         byte          lm13      = 49;    //номер цифрового входа контрольной лампы 13(-)
         byte          lm14      = 51;    //номер цифрового входа контрольной лампы 14
         byte          lm15      = 53;    //номер цифрового входа контрольной лампы 15
         byte          sp_sens   = 6;     //количество имп./об. датчика скорости
         byte          ds_pin    = 22;    //номер цифрового входа датчика температуры DS18B20
         byte          refr      = 20;    //период обновления данных, милисекунды
//******************************************************************************************************
         unsigned long sp_mult   = 0;     //коэфф. пересчета частоты в скорость
volatile unsigned long millis_t  = 0;           
//******************************************************************************************************
volatile unsigned long micros_sp = 0;
volatile byte          sz        = 0;     //счетчик обнуления
volatile unsigned int  sp        = 0;     //скорость
volatile boolean       st        = false; //триггер
//******************************************************************************************************
volatile unsigned long micros_th = 0;
volatile byte          tz        = 0;     //счетчик обнуления
volatile unsigned int  th        = 0;     //обороты
volatile boolean       tt        = false; //триггер
//******************************************************************************************************
OneWire ds(ds_pin);                       //инициализация OneWire
volatile unsigned int  ds_tm     = 0;     //температура DS18B20
         unsigned long millis_ds = 0; 
         const int     ds_upd    = 1000;  //период опроса DS18B20, милисекунды
//******************************************************************************************************
volatile unsigned int  vo        = 0;     //напряжение
volatile unsigned int  fu        = 0;     //топливо
volatile unsigned int  tm        = 0;     //температура
String                 Out       = "";    //строка данных
//******************************************************************************************************
void setup(){
  Serial .begin(115200);                  //инициализация порта RX0/TX0(USB терминал)
//  Serial1.begin(115200);                  //инициализация порта RX1/TX1(ESP8266, HLK-RM04)  
  attachInterrupt(0, spd, FALLING);       //прерывание спидометра по фронтам импульса
  attachInterrupt(1, tah, RISING);        //прерывание тахометра по фронтам импульса
  sp_mult = 3600000/sp_sens;              //вычисление коэфф. пересчета частоты в скорость
}
void loop(){
  DallasRd();
  refresh();    
}
void refresh(){                          //опрос входов
  if((millis() - millis_t) >= refr){
    millis_t = millis();
    vo = analogRead(volt);
    fu = analogRead(fuel);
    tm = analogRead(temp);
    //********************************************************************  
    Out += (sp / 100) % 10;                //скорость
    Out += (sp / 10)  % 10;
    Out += (sp)       % 10;
    Out += ",";
    //********************************************************************
    Out += (th / 10000) % 10;              //обороты
    Out += (th / 1000)  % 10;               
    Out += (th / 100)   % 10;
    Out += (th / 10)    % 10;
    Out += (th)         % 10;
    Out += ",";
    //********************************************************************
    Out += (vo / 1000) % 10;               //напряжение
    Out += (vo / 100)  % 10;
    Out += (vo / 10)   % 10;
    Out += (vo)        % 10;
    Out += ",";
    //********************************************************************
    Out += (fu / 1000) % 10;               //уровень топлива
    Out += (fu / 100)  % 10;
    Out += (fu / 10)   % 10;
    Out += (fu)        % 10;
    Out += ",";
    //********************************************************************
    Out += (tm / 1000) % 10;               //температура ОЖ
    Out += (tm / 100)  % 10;
    Out += (tm / 10)   % 10;
    Out += (tm)        % 10;
    //********************************************************************
    Out += ",0,0,0,0,0,0,0,0,0,0,";
    //********************************************************************
    if(ds_tm > 295){
      Out += "   ";
    }else{
      Out += (ds_tm / 100) % 10; 
      Out += (ds_tm / 10)  % 10;              //температура DS18B20
      Out += (ds_tm)       % 10;
    }
    //********************************************************************
    Out += ",0,";
    //********************************************************************
    Out +=   digitalRead(igni);            //зажигание
    Out +=   digitalRead(loli);            //свет ближний
    //********************************************************************
    Out +=   digitalRead(revr);            //задний ход
    //********************************************************************
    Out += ( digitalRead(trnL)             //левый поворот
        +    digitalRead(trnR) * 2);       //правый поворот
    //********************************************************************
    Out += ( digitalRead(ligh)             //габарит
        +    digitalRead(hili) * 2);       //дальний
    //********************************************************************
    Out += ( digitalRead(fogF)             //птф передние
        +    digitalRead(fogR) * 2);       //птф задние
    //********************************************************************
    Out +=   digitalRead(lm00);            //вход контрольной лампы  0
    Out +=   digitalRead(lm01);            //вход контрольной лампы  1
    Out +=   digitalRead(lm02);            //вход контрольной лампы  2
    Out +=   digitalRead(lm03);            //вход контрольной лампы  3
    Out +=  !digitalRead(lm04);            //вход контрольной лампы  4
    Out +=  !digitalRead(lm05);            //вход контрольной лампы  5
    Out +=   digitalRead(lm06);            //вход контрольной лампы  6
    Out +=   digitalRead(lm07);            //вход контрольной лампы  7
    Out +=   digitalRead(lm08);            //вход контрольной лампы  8
    Out +=   digitalRead(lm09);            //вход контрольной лампы  9
    Out +=   digitalRead(lm10);            //вход контрольной лампы  10
    Out +=   digitalRead(lm11);            //вход контрольной лампы  11
    Out +=  !digitalRead(lm12);            //вход контрольной лампы  12
    Out +=  !digitalRead(lm13);            //вход контрольной лампы  13
    Out +=   digitalRead(lm14);            //вход контрольной лампы  14
    Out +=   digitalRead(lm15);            //вход контрольной лампы  15
    Out += ":\n";
    Serial .print(Out);
    Serial .flush();
//    Serial1.print(Out);
//    Serial1.flush();
    if(tz != 0){tz--;}else{th = 0;}; 
    if(sz != 0){sz--;}else{sp = 0;};
    Out = String("");
  } 
}
//******************************************************************************************************
void spd(){                               //измеряем частоту на входе спидометра по прерыванию
  if(!st){micros_sp = micros();}
  else   {sp = (sp_mult/(micros() - micros_sp));}
  st = !st;
  sz = 30;
}
//******************************************************************************************************
void tah(){                               //измеряем частоту на входе тахометра по прерыванию
  if(!tt){micros_th = micros();}
  else   {th = (30000000/(micros() - micros_th));}
  tt = !tt;
  tz = 30;
}
//******************************************************************************************************
int DallasRd(){
  byte data[2];
  if ((millis() - millis_ds) > ds_upd){
    ds.reset();
    ds.write(0xCC);
    ds.write(0xBE);
    data[0] = ds.read();
    data[1] = ds.read();
    ds_tm = (data[1] << 8) + data[0];
    ds_tm = (ds_tm >> 4) + 200;
    millis_ds = millis();
    ds.reset();
    ds.write(0xCC);
    ds.write(0x44, 1);
  }
}
